---
import { type CollectionEntry, getCollection } from 'astro:content';
import CategoryBadge from '../../../components/blog/CategoryBadge.astro';
import PostCard from '../../../components/blog/PostCard.astro';
import ShareButtons from '../../../components/blog/ShareButtons.astro';
import TableOfContents from '../../../components/blog/TableOfContents.astro';
import TipButton from '../../../components/blog/TipButton.astro';
import BlogLayout from '../../../layouts/BlogLayout.astro';
import { getCurrentLocale } from '../../../utils/i18n';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    return data.lang === 'en' && !data.isDraft;
  });

  return posts.map((post) => ({
    params: { slug: post.slug.replace('en/', '') },
    props: { post },
  }));
}

interface Props { post: CollectionEntry<'blog'> }

const { post } = Astro.props;
const { Content, headings } = await post.render();
const currentLocale = getCurrentLocale(Astro.url);

// Get related posts and navigation posts
const allPosts = await getCollection('blog', ({ data }) => {
  return data.lang === 'en' && !data.isDraft;
});

const sortedPosts = allPosts.sort(
  (a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

const currentIndex = sortedPosts.findIndex(p => p.slug === post.slug);
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug && p.data.category === post.data.category)
  .slice(0, 3);

const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : undefined;
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : undefined;

const formattedPubDate = new Date(post.data.pubDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const formattedUpdatedDate = post.data.updatedDate ? new Date(post.data.updatedDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}) : null;

// Calculate reading time based on content length
const readingTime = Math.max(1, Math.round(post.body.length / 1000));
const fullUrl = new URL(Astro.url.pathname, Astro.site).toString();

---

<BlogLayout post={post} relatedPosts={relatedPosts} nextPost={nextPost} prevPost={prevPost}>
  <article class="mx-auto max-w-4xl px-4 py-16 sm:px-6 lg:px-8">
    <!-- Breadcrumb -->
    <nav class="mb-8" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2 text-sm text-stone-600 dark:text-stone-400">
        <li><a href="/en" class="hover:text-blue-600 dark:hover:text-blue-400">Home</a></li>
        <li class="before:content-['/'] before:mx-2"><a href="/en/blog" class="hover:text-blue-600 dark:hover:text-blue-400">Blog</a></li>
        <li class="before:content-['/'] before:mx-2"><span class="text-stone-900 dark:text-stone-100">{post.data.title}</span></li>
      </ol>
    </nav>

    <!-- Header -->
    <header class="mb-8">
      <div class="mb-4 flex items-center gap-4 text-sm">
        <CategoryBadge category={post.data.category} />
        <time datetime={post.data.pubDate.toISOString()} class="text-stone-500 dark:text-stone-400">{formattedPubDate}</time>
        <span class="text-stone-500 dark:text-stone-400">{readingTime} min read</span>
      </div>
      <h1 class="mb-4 text-4xl font-bold text-stone-900 dark:text-stone-100 sm:text-5xl">{post.data.title}</h1>
      <p class="mb-6 text-lg text-stone-600 dark:text-stone-300">{post.data.description}</p>
      <div class="flex items-center justify-between border-b border-stone-200 pb-6 dark:border-stone-700">
        <div class="text-sm font-medium text-stone-900 dark:text-stone-100">{post.data.author}</div>
        <ShareButtons title={post.data.title} url={fullUrl} />
      </div>
    </header>

    {post.data.image && (
      <div class="mb-8 overflow-hidden rounded-2xl">
        <img src={post.data.image.url} alt={post.data.image.alt} class="h-auto w-full" loading="eager" decoding="async" />
      </div>
    )}

    {headings.length > 3 && <div class="mb-8"><TableOfContents headings={headings} /></div>}

    <div class="prose prose-lg prose-stone mx-auto dark:prose-invert">
      <Content />
    </div>

    <div class="mx-auto mt-12 max-w-3xl"><TipButton /></div>

    <!-- Tags -->
    {post.data.tags.length > 0 && (
      <div class="mt-12 border-t border-stone-200 pt-8 dark:border-stone-700">
        <h3 class="mb-4 text-sm font-medium uppercase tracking-wider text-stone-500 dark:text-stone-400">
          Tags
        </h3>
        <div class="flex flex-wrap gap-2">
          {post.data.tags.map(tag => (
            <span class="rounded-full bg-stone-100 px-3 py-1 text-sm font-medium text-stone-600 dark:bg-stone-700 dark:text-stone-300">
              #{tag}
            </span>
          ))}
        </div>
      </div>
    )}

    <!-- Navigation -->
    <nav class="mt-12 grid gap-4 border-t border-stone-200 pt-8 dark:border-stone-700 sm:grid-cols-2">
      {prevPost && (
        <a
          href={`/en/blog/${prevPost.slug.replace('en/', '')}`}
          class="group flex flex-col rounded-lg border border-stone-200 p-4 transition-colors hover:border-blue-600 dark:border-stone-700 dark:hover:border-blue-400"
        >
          <span class="mb-1 text-sm text-stone-500 dark:text-stone-400">
            ← Previous
          </span>
          <span class="font-medium text-stone-900 group-hover:text-blue-600 dark:text-stone-100 dark:group-hover:text-blue-400">
            {prevPost.data.title}
          </span>
        </a>
      )}
      
      {nextPost && (
        <a
          href={`/en/blog/${nextPost.slug.replace('en/', '')}`}
          class={`group flex flex-col rounded-lg border border-stone-200 p-4 text-right transition-colors hover:border-blue-600 dark:border-stone-700 dark:hover:border-blue-400 ${!prevPost ? 'sm:col-start-2' : ''}`}
        >
          <span class="mb-1 text-sm text-stone-500 dark:text-stone-400">
            Next →
          </span>
          <span class="font-medium text-stone-900 group-hover:text-blue-600 dark:text-stone-100 dark:group-hover:text-blue-400">
            {nextPost.data.title}
          </span>
        </a>
      )}
    </nav>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="mt-16">
        <h2 class="mb-8 text-2xl font-bold text-stone-900 dark:text-stone-100">
          Related Posts
        </h2>
        <div class="grid gap-8 md:grid-cols-3">
          {relatedPosts.map(relatedPost => (
            <PostCard post={relatedPost} />
          ))}
        </div>
      </section>
    )}
  </article>
</BlogLayout> 