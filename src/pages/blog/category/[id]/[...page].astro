---
import type { GetStaticPaths, Page } from 'astro';
import PostCard from '../../../../components/blog/PostCard.astro';
import Layout from '../../../../layouts/Layout.astro';
import { allPosts } from '../../../../utils/blog';
import { getCurrentLocale } from '../../../../utils/i18n';

interface Props {
  page: Page<any>;
  id: string;
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  // 取得可能なカテゴリ一覧
  const categories = Array.from(new Set(allPosts.map(p => p.data.category)));

  const paths = categories.flatMap(category => {
    const filtered = allPosts.filter(p => p.data.category === category);
    const sorted = filtered.sort(
      (a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
    );
    return paginate(sorted, { pageSize: 12, params: { id: category } });
  });

  return paths;
};

const { page, id } = Astro.props as Props;
const currentLocale = getCurrentLocale(Astro.url);

const catLabelMap: Record<string, { ja: string; en: string }> = {
  'ai-driven-futures': { ja: 'AI駆動の未来', en: 'AI-Driven Futures' },
  'high-performance-engineering': { ja: '高性能エンジニアリング', en: 'High-Performance Engineering' },
  'founders-journey': { ja: '創業者の軌跡', en: 'Founders Journey' },
  'tech-lab-creativity': { ja: 'テックラボの創造性', en: 'Tech Lab Creativity' },
};

const categoryLabel = catLabelMap[id]?.[currentLocale === 'ja' ? 'ja' : 'en'] ?? id;
const pageTitle = `${categoryLabel} | Blog | Cor.inc`;
const pageDescription = currentLocale === 'ja'
  ? `${categoryLabel} に属するブログ記事一覧` : `Blog posts in ${categoryLabel}`;
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
    <h1 class="mb-8 text-center text-4xl font-bold text-stone-900 dark:text-stone-100 sm:text-5xl">
      {categoryLabel}
    </h1>

    <!-- 記事グリッド -->
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {page.data.map(post => (
        <PostCard post={post} />
      ))}
    </div>

    <!-- ページネーション -->
    {page.lastPage > 1 && (
      <nav class="mt-12 flex items-center justify-center gap-2" aria-label="Pagination">
        <a
          href={page.url.prev ? `/blog/category/${id}${page.url.prev}` : '#'}
          class={`rounded-lg px-3 py-2 text-sm font-medium ${
            !page.url.prev
              ? 'cursor-not-allowed bg-stone-100 text-stone-400 dark:bg-stone-700 dark:text-stone-500'
              : 'bg-stone-100 text-stone-700 hover:bg-stone-200 dark:bg-stone-700 dark:text-stone-200 dark:hover:bg-stone-600'
          }`}
          aria-disabled={!page.url.prev}
        >
          {currentLocale === 'ja' ? '前へ' : 'Previous'}
        </a>

        <div class="flex gap-1">
          {Array.from({ length: page.lastPage }, (_, i) => i + 1).map(num => (
            <a
              href={num === 1 ? `/blog/category/${id}` : `/blog/category/${id}/${num}`}
              class={`rounded-lg px-3 py-2 text-sm font-medium ${
                num === page.currentPage
                  ? 'bg-blue-600 text-white'
                  : 'bg-stone-100 text-stone-700 hover:bg-stone-200 dark:bg-stone-700 dark:text-stone-200 dark:hover:bg-stone-600'
              }`}
              aria-current={num === page.currentPage ? 'page' : undefined}
            >
              {num}
            </a>
          ))}
        </div>

        <a
          href={page.url.next ? `/blog/category/${id}${page.url.next}` : '#'}
          class={`rounded-lg px-3 py-2 text-sm font-medium ${
            !page.url.next
              ? 'cursor-not-allowed bg-stone-100 text-stone-400 dark:bg-stone-700 dark:text-stone-500'
              : 'bg-stone-100 text-stone-700 hover:bg-stone-200 dark:bg-stone-700 dark:text-stone-200 dark:hover:bg-stone-600'
          }`}
          aria-disabled={!page.url.next}
        >
          {currentLocale === 'ja' ? '次へ' : 'Next'}
        </a>
      </nav>
    )}
  </div>
</Layout> 