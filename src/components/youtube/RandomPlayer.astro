---
// チャンネルIDを指定
const CHANNEL_ID = 'UCmivQ0Dndw81cLjkc9lgIOw';
const API_KEY = import.meta.env.PUBLIC_YOUTUBE_API_KEY;

// APIキーの存在確認
if (!API_KEY) {
  console.warn('YouTube API key not configured. YouTube content will fallback to direct channel link.');
}
---

<div class="youtube-random-player">
  <div class="aspect-video w-full">
    <div id="youtube-player" class="flex items-center justify-center h-full bg-gray-100 dark:bg-gray-800 rounded-lg">
      <!-- ローディング表示（初期表示） -->
      <div class="youtube-loading">
        <svg class="animate-spin h-8 w-8 text-primary-600 dark:text-primary-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span class="ml-2 text-gray-600 dark:text-gray-400">動画を読み込み中...</span>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ CHANNEL_ID, API_KEY }}>
  /**
   * YouTube IFrame APIを読み込み、複数インスタンスに対応した初期化を実行
   * グローバルコールバックの上書きを防ぐためコールバックキューを使用
   */
  function loadYouTubeAPI() {
    // すでにAPIが読み込まれている場合
    if (window.YT?.Player) {
      initializePlayer();
      return;
    }

    // コールバックキューの初期化
    window.youtubeAPICallbacks = window.youtubeAPICallbacks || [];
    window.youtubeAPICallbacks.push(initializePlayer);

    // APIが読み込み中の場合はスキップ
    if (window.youtubeAPILoading) {
      return;
    }

    window.youtubeAPILoading = true;

    // YouTube IFrame APIを動的に読み込み
    const script = document.createElement('script');
    script.src = 'https://www.youtube.com/iframe_api';
    script.async = true;
    document.head.appendChild(script);

    // グローバルコールバックを設定（一度だけ）
    window.onYouTubeIframeAPIReady = () => {
      const callbacks = window.youtubeAPICallbacks || [];
      callbacks.forEach(callback => {
        try {
          callback();
        } catch (error) {
          console.error('YouTube API callback error:', error);
        }
      });
      window.youtubeAPICallbacks = [];
    };
  }

  // プレイヤーの初期化
  async function initializePlayer() {
    const playerContainer = document.getElementById('youtube-player');
    if (!playerContainer) return;

    // すでにプレイヤーが存在する場合はスキップ
    if (playerContainer.querySelector('iframe')) {
      return;
    }

    // APIキーが設定されていない場合のフォールバック
    if (!API_KEY) {
      showErrorFallback('YouTube APIが設定されていません');
      return;
    }

    try {
      // チャンネルの動画リストを取得
      const videoIds = await fetchChannelVideos();

      if (!videoIds.length) {
        showErrorFallback('動画が見つかりませんでした');
        return;
      }

      // ランダムに動画を選択
      const randomVideoId = videoIds[Math.floor(Math.random() * videoIds.length)];

      // YouTubeプレイヤーを作成
      new YT.Player('youtube-player', {
        height: '100%',
        width: '100%',
        videoId: randomVideoId,
        playerVars: {
          autoplay: 0, // 自動再生は無効（ユーザーの操作を待つ）
          mute: 0,
          controls: 1,
          rel: 0,
          playsinline: 1,
          modestbranding: 1,
          origin: window.location.origin // originを明示的に設定
        },
        events: {
          'onReady': onPlayerReady,
          'onError': onPlayerError
        }
      });
    } catch (error) {
      console.error('YouTube プレイヤーの初期化に失敗しました:', error);
      showErrorFallback('動画の読み込みに失敗しました');
    }
  }

  // チャンネルの動画リストを取得
  async function fetchChannelVideos() {
    try {
      // チャンネル情報を取得
      const channelUrl = `https://www.googleapis.com/youtube/v3/channels?part=contentDetails&id=${CHANNEL_ID}&key=${API_KEY}`;
      const channelResponse = await fetch(channelUrl);

      if (!channelResponse.ok) {
        const errorMsg = channelResponse.status === 403
          ? 'YouTube API quota exceeded or invalid API key'
          : `Channel API error: ${channelResponse.status}`;
        throw new Error(errorMsg);
      }

      const channelData = await channelResponse.json();
      const uploadsPlaylistId = channelData.items?.[0]?.contentDetails?.relatedPlaylists?.uploads;

      if (!uploadsPlaylistId) {
        throw new Error('チャンネルが見つかりません');
      }

      // プレイリストから動画リストを取得
      const playlistUrl = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=${uploadsPlaylistId}&maxResults=50&key=${API_KEY}`;
      const playlistResponse = await fetch(playlistUrl);

      if (!playlistResponse.ok) {
        const errorMsg = playlistResponse.status === 403
          ? 'YouTube API quota exceeded or invalid API key'
          : `Playlist API error: ${playlistResponse.status}`;
        throw new Error(errorMsg);
      }

      const playlistData = await playlistResponse.json();

      if (!playlistData.items?.length) {
        throw new Error('動画が見つかりません');
      }

      // 動画IDの配列を返す
      return playlistData.items
        .map(item => item.snippet?.resourceId?.videoId)
        .filter(Boolean);

    } catch (error) {
      console.error('動画リストの取得に失敗しました:', error);
      return [];
    }
  }

  // プレイヤー準備完了時
  function onPlayerReady() {
    // ローディング表示を削除
    const loadingElement = document.querySelector('.youtube-loading');
    if (loadingElement) {
      loadingElement.remove();
    }
  }

  // エラー時のフォールバックUI表示
  function showErrorFallback(message) {
    const playerContainer = document.getElementById('youtube-player');
    if (!playerContainer) return;

    playerContainer.innerHTML = `
      <div class="flex items-center justify-center h-full bg-gray-100 dark:bg-gray-800 rounded-lg">
        <div class="text-center px-4">
          <p class="text-gray-600 dark:text-gray-400 mb-2">${message}</p>
          <a href="https://www.youtube.com/@Cor.Incorporated"
             target="_blank"
             rel="noopener noreferrer"
             class="text-primary-600 hover:underline">
            YouTubeチャンネルを直接ご覧ください
          </a>
        </div>
      </div>
    `;
  }

  // プレイヤーエラー時
  function onPlayerError(event) {
    console.error('YouTube プレイヤーエラー:', event.data);
    showErrorFallback('動画の再生でエラーが発生しました');
  }

  // 初期化のエントリーポイント
  function initialize() {
    const playerContainer = document.getElementById('youtube-player');
    if (playerContainer && !playerContainer.querySelector('iframe')) {
      loadYouTubeAPI();
    }
  }

  // DOMが読み込まれたら実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }

  // View Transitions対応
  document.addEventListener('astro:after-swap', () => {
    setTimeout(initialize, 100);
  });

  // YouTube APIのプリロード
  document.addEventListener('astro:before-preparation', () => {
    if (!window.YT && !window.youtubeAPILoading) {
      const preload = document.createElement('link');
      preload.rel = 'preload';
      preload.as = 'script';
      preload.href = 'https://www.youtube.com/iframe_api';
      document.head.appendChild(preload);
    }
  });
</script>

<style>
  .youtube-random-player {
    width: 100%;
    max-width: 100%;
  }

  #youtube-player {
    width: 100%;
    height: 100%;
    min-height: 300px;
  }

  .youtube-loading {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  #youtube-player iframe {
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
  }
</style>