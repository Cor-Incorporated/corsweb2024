---
// チャンネルIDを指定
const CHANNEL_ID = 'UCmivQ0Dndw81cLjkc9lgIOw';
const API_KEY = import.meta.env.PUBLIC_YOUTUBE_API_KEY;

// APIキーの存在確認
if (!API_KEY) {
  console.warn('YouTube API key not configured. YouTube content will fallback to direct channel link.');
}
---

<div class="youtube-random-player">
  <div class="aspect-video w-full">
    <div id="youtube-player"></div>
  </div>
</div>

<script is:inline define:vars={{ CHANNEL_ID, API_KEY }}>
  /**
   * YouTube IFrame APIを読み込み、複数インスタンスに対応した初期化を実行
   * グローバルコールバックの上書きを防ぐためコールバックキューを使用
   */
  function loadYouTubeAPI() {
    if (window.YT && window.YT.Player) {
      // APIが既に読み込まれている場合は直接初期化
      initializePlayer();
    } else {
      // コールバックのキューを作成または既存のものに追加
      if (!window.youtubeAPICallbacks) {
        window.youtubeAPICallbacks = [];
      }
      window.youtubeAPICallbacks.push(initializePlayer);

      // YouTube IFrame APIが既に読み込み中かチェック
      if (!window.youtubeAPILoading) {
        window.youtubeAPILoading = true;

        // YouTube IFrame APIを動的に読み込み
        const tag = document.createElement('script');
        tag.src = 'https://www.youtube.com/iframe_api';
        const firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // グローバルコールバックを設定（一度だけ）
        window.onYouTubeIframeAPIReady = function() {
          // キューに登録されたすべてのコールバックを実行
          if (window.youtubeAPICallbacks) {
            window.youtubeAPICallbacks.forEach(callback => {
              try {
                callback();
              } catch (error) {
                console.error('YouTube API callback error:', error);
              }
            });
            // コールバックをクリア
            window.youtubeAPICallbacks = [];
          }
        };
      }
    }
  }

  // プレイヤーの初期化
  async function initializePlayer() {
    const playerContainer = document.getElementById('youtube-player');

    // APIキーが設定されていない場合のフォールバック
    if (!API_KEY) {
      if (playerContainer) {
        playerContainer.innerHTML = `
          <div class="flex items-center justify-center h-full bg-gray-100 dark:bg-gray-800 rounded-lg">
            <p class="text-gray-600 dark:text-gray-400 text-center px-4">
              YouTube APIが設定されていません。<br>
              <a href="https://www.youtube.com/@Cor.Incorporated" target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:underline">YouTubeチャンネルを直接ご覧ください</a>
            </p>
          </div>
        `;
      }
      return;
    }

    try {
      // チャンネルの動画リストを取得
      const videoIds = await fetchChannelVideos();

      if (videoIds.length === 0) {
        console.error('動画が見つかりませんでした');
        showErrorFallback('動画が見つかりませんでした');
        return;
      }

      // ランダムに動画を選択
      const randomVideoId = videoIds[Math.floor(Math.random() * videoIds.length)];

      // YouTubeプレイヤーを作成
      new YT.Player('youtube-player', {
        height: '100%',
        width: '100%',
        videoId: randomVideoId,
        playerVars: {
          autoplay: 0, // 自動再生は無効（ユーザーの操作を待つ）
          mute: 0,
          controls: 1,
          rel: 0,
          playsinline: 1,
          modestbranding: 1
        },
        events: {
          'onReady': onPlayerReady,
          'onError': onPlayerError
        }
      });
    } catch (error) {
      console.error('YouTube プレイヤーの初期化に失敗しました:', error);
      showErrorFallback('動画の読み込みに失敗しました');
    }
  }

  // チャンネルの動画リストを取得
  async function fetchChannelVideos() {
    try {
      // 1. チャンネル情報を取得してアップロードプレイリストIDを取得
      const channelResponse = await fetch(
        `https://www.googleapis.com/youtube/v3/channels?part=contentDetails&id=${CHANNEL_ID}&key=${API_KEY}`
      );

      if (!channelResponse.ok) {
        if (channelResponse.status === 403) {
          throw new Error('YouTube API quota exceeded or invalid API key');
        }
        throw new Error(`Channel API error: ${channelResponse.status}`);
      }

      const channelData = await channelResponse.json();

      if (!channelData.items || channelData.items.length === 0) {
        throw new Error('チャンネルが見つかりません');
      }

      const uploadsPlaylistId = channelData.items[0].contentDetails.relatedPlaylists.uploads;

      // 2. アップロードプレイリストから動画リストを取得
      const playlistResponse = await fetch(
        `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=${uploadsPlaylistId}&maxResults=50&key=${API_KEY}`
      );

      if (!playlistResponse.ok) {
        if (playlistResponse.status === 403) {
          throw new Error('YouTube API quota exceeded or invalid API key');
        }
        throw new Error(`Playlist API error: ${playlistResponse.status}`);
      }

      const playlistData = await playlistResponse.json();

      if (!playlistData.items || playlistData.items.length === 0) {
        throw new Error('動画が見つかりません');
      }

      // 動画IDの配列を返す
      return playlistData.items
        .map(item => item.snippet.resourceId.videoId)
        .filter(id => id); // 無効なIDを除外

    } catch (error) {
      console.error('動画リストの取得に失敗しました:', error);
      return [];
    }
  }

  // プレイヤー準備完了時
  function onPlayerReady(_event) {
    console.log('YouTube プレイヤーが準備完了しました');
    // プレイヤーの初期設定がある場合はここで実行
    // const player = _event.target;
    // 例: player.setVolume(50); 等の初期設定
  }

  // エラー時のフォールバックUI表示
  function showErrorFallback(message) {
    const playerContainer = document.getElementById('youtube-player');
    if (playerContainer) {
      playerContainer.innerHTML = `
        <div class="flex items-center justify-center h-full bg-gray-100 dark:bg-gray-800 rounded-lg">
          <div class="text-center px-4">
            <p class="text-gray-600 dark:text-gray-400 mb-2">${message}</p>
            <a href="https://www.youtube.com/@Cor.Incorporated" target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:underline">
              YouTubeチャンネルを直接ご覧ください
            </a>
          </div>
        </div>
      `;
    }
  }

  // プレイヤーエラー時
  function onPlayerError(event) {
    console.error('YouTube プレイヤーエラー:', event.data);
    showErrorFallback('動画の再生でエラーが発生しました');
  }

  // DOMが読み込まれたら実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadYouTubeAPI);
  } else {
    loadYouTubeAPI();
  }
</script>

<style>
  .youtube-random-player {
    width: 100%;
    max-width: 100%;
  }

  #youtube-player {
    width: 100%;
    height: 100%;
  }
</style>