---
import type { CollectionEntry } from 'astro:content';
import { getCurrentLocale } from '../../utils/i18n';
import CategoryBadge from './CategoryBadge.astro';

interface Props {
  post: CollectionEntry<'blog'> | {
    slug: string;
    data: {
      title: string;
      description: string;
      pubDate: Date;
      author: string;
      category: string;
      tags: string[];
      image?: { url: string; alt: string } | null;
      lang: string;
      featured?: boolean;
    };
  };
}

const { post } = Astro.props;
const { title, description, pubDate, category, tags, image } = post.data;
const currentLocale = getCurrentLocale(Astro.url);

const formattedDate = new Date(pubDate).toLocaleDateString(currentLocale === 'ja' ? 'ja-JP' : 'en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Enable individual post links - remove language prefix from slug
const cleanSlug = post.slug.replace(/^(ja|en)\//, '');
const postUrl = currentLocale === 'ja' ? `/blog/${cleanSlug}` : `/en/blog/${cleanSlug}`;
---

<article class="group relative flex h-80 flex-col rounded-2xl bg-white shadow-sm transition-all duration-300 hover:shadow-lg dark:bg-stone-800">
  <a href={postUrl} class="absolute inset-0 z-10" aria-label={title}>
    <span class="sr-only">{currentLocale === 'ja' ? '記事を読む' : 'Read article'}</span>
  </a>
  
  {image && (
    <div class="aspect-[16/9] overflow-hidden rounded-t-2xl">
      <img
        src={image.url}
        alt={image.alt}
        loading="lazy"
        decoding="async"
        class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
      />
    </div>
  )}
  
  <div class="flex flex-1 flex-col p-6">
    <div class="mb-3 flex items-center gap-2 text-sm">
      <CategoryBadge category={category} />
      <time datetime={new Date(pubDate).toISOString()} class="text-stone-500 dark:text-stone-400">
        {formattedDate}
      </time>
    </div>
    
    <h3 class="mb-2 line-clamp-2 text-lg font-semibold text-stone-900 transition-colors group-hover:text-blue-600 dark:text-stone-100 dark:group-hover:text-blue-400">
      {title}
    </h3>
    
    <p class="mb-4 line-clamp-3 flex-1 text-sm text-stone-600 dark:text-stone-300">
      {description}
    </p>
    
    {tags.length > 0 && (
      <div class="mt-auto flex flex-wrap gap-1">
        {tags.slice(0, 2).map(tag => (
          <span class="rounded-full bg-stone-100 px-2 py-1 text-xs font-medium text-stone-600 dark:bg-stone-700 dark:text-stone-300">
            #{tag}
          </span>
        ))}
        {tags.length > 2 && (
          <span class="text-xs text-stone-500 dark:text-stone-400">
            +{tags.length - 2}
          </span>
        )}
      </div>
    )}
  </div>
</article>